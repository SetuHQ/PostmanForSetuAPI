{
	"info": {
		"_postman_id": "06352bde-7d3c-4ca0-8569-6d447f039f4a",
		"name": "setu_apis_with_prerequest_scripts",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Payer - Fetch Billers",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6e86352-3500-46ec-8199-3fa15eeb5804",
						"exec": [
							"",
							"pm.globals.set(\"apiHost\", \"https://sandbox.setu.co\");",
							"",
							"postman.setEnvironmentVariable(\"productInstanceID\", \"3194075996277700810\")",
							"var schemeId = \"79648a41-4d8d-40b1-8b90-33bafd3abfc2\";",
							"var secret = 'fbbd0cbb-631e-4c6d-9dd0-458a4b53b704';",
							"var signatureKeyId = 'somekeyid111';",
							"var singatureSecret = 'somesecre111';",
							"",
							"var jti = Math.floor(Math.random()*1e15) + '';",
							"",
							"function base64url(source) {",
							"\t// Encode in classical base64",
							"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
							"",
							"\t// Remove padding equal characters",
							"\tencodedSource = encodedSource.replace(/=+$/, '');",
							"",
							"\t// Replace characters according to base64url specifications",
							"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
							"\tencodedSource = encodedSource.replace(/\\//g, '_');",
							"",
							"\treturn encodedSource;",
							"}",
							"",
							"function addIAT(request) {",
							"\tvar iat = Math.floor(Date.now() / 1000);",
							"\tdata.iat = iat;",
							"\treturn data;",
							"}",
							"",
							"",
							"var header = {",
							"\t\"typ\": \"JWT\",",
							"\t\"alg\": \"HS256\"",
							"};",
							"",
							"var data = {",
							"\t\"aud\": schemeId,",
							"\t\"jti\": jti",
							"};",
							"",
							"data = addIAT(data);",
							"",
							"",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
							"var encodedHeader = base64url(stringifiedHeader);",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
							"console.log(data)",
							"var encodedData = base64url(stringifiedData);",
							"",
							"// build token",
							"var token = encodedHeader + \".\" + encodedData;",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, secret);",
							"signature = base64url(signature);",
							"var signedToken = token + \".\" + signature;",
							"console.log(signedToken);",
							"postman.setEnvironmentVariable(\"BearerToken\", signedToken);",
							"",
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"      sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function(h){",
							"    if (signingBase !== '') { signingBase += '\\n'; }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"  var hashf = (function() {",
							"      switch (config.algorithm) {",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"        default : return null;",
							"      }",
							"    }());",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var x = encodeURI(hash.toString(CryptoJS.enc.Base64));",
							"  var y = CryptoJS.enc.Base64.stringify(hash);",
							"  ",
							"  var signatureOptions = {",
							"        keyId : config.keyId,",
							"        algorithm: config.algorithm,",
							"        headers: config.headers,",
							"        signature : y",
							"      };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function(key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"  console.log(JSON.stringify(sig))",
							"  return sig;",
							"}",
							"",
							"",
							"var curDate = new Date().toGMTString();",
							"var targetUrl = request.url.trim(); // there may be surrounding ws",
							"targetUrl = targetUrl.replace(new RegExp('^https?://[^/]+/'),'/'); // strip hostname",
							"var method = request.method.toLowerCase();",
							"var request_data =  request.body;",
							"console.log(\"Request boduy is \", request.body);",
							"console.log(request_data);",
							"var sha256digest = CryptoJS.SHA256(request_data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'SHA-256=' + base64sha256;",
							"",
							"var headerHash = {",
							"      date : curDate,",
							"      digest : computedDigest",
							"    };",
							"",
							"var config = {",
							"      algorithm : 'hmac-sha256',",
							"      keyId : signatureKeyId,",
							"      secretkey : singatureSecret,",
							"      headers : ['digest' ]",
							"};",
							"",
							"var sig = computeHttpSignature(config, headerHash);",
							"",
							"postman.setEnvironmentVariable('httpsig', sig);",
							"postman.setEnvironmentVariable('computed-digest', computedDigest);",
							"postman.setEnvironmentVariable(\"current-date\", curDate);",
							"postman.setEnvironmentVariable(\"target-url\", targetUrl);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{BearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Setu-Product-Instance-ID",
						"value": "{{productInstanceID}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Digest",
						"value": "{{computed-digest}}",
						"type": "text"
					},
					{
						"key": "Signature",
						"value": "{{httpsig}}",
						"type": "text"
					},
					{
						"key": "Date",
						"value": "{{current-date}}",
						"type": "text"
					},
					{
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://sandbox.setu.co/api/utilities/bills/billers",
					"protocol": "https",
					"host": [
						"sandbox",
						"setu",
						"co"
					],
					"path": [
						"api",
						"utilities",
						"bills",
						"billers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payer - Get bill with ID",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d6e86352-3500-46ec-8199-3fa15eeb5804",
						"exec": [
							"",
							"pm.globals.set(\"apiHost\", \"https://sandbox.setu.co\");",
							"",
							"postman.setEnvironmentVariable(\"productInstanceID\", \"3194075996277700810\")",
							"var schemeId = \"79648a41-4d8d-40b1-8b90-33bafd3abfc2\";",
							"var secret = 'fbbd0cbb-631e-4c6d-9dd0-458a4b53b704';",
							"var signatureKeyId = 'somekeyid111';",
							"var singatureSecret = 'somesecre111';",
							"",
							"var jti = Math.floor(Math.random()*1e15) + '';",
							"",
							"function base64url(source) {",
							"\t// Encode in classical base64",
							"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
							"",
							"\t// Remove padding equal characters",
							"\tencodedSource = encodedSource.replace(/=+$/, '');",
							"",
							"\t// Replace characters according to base64url specifications",
							"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
							"\tencodedSource = encodedSource.replace(/\\//g, '_');",
							"",
							"\treturn encodedSource;",
							"}",
							"",
							"function addIAT(request) {",
							"\tvar iat = Math.floor(Date.now() / 1000);",
							"\tdata.iat = iat;",
							"\treturn data;",
							"}",
							"",
							"",
							"var header = {",
							"\t\"typ\": \"JWT\",",
							"\t\"alg\": \"HS256\"",
							"};",
							"",
							"var data = {",
							"\t\"aud\": schemeId,",
							"\t\"jti\": jti",
							"};",
							"",
							"data = addIAT(data);",
							"",
							"",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
							"var encodedHeader = base64url(stringifiedHeader);",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
							"console.log(data)",
							"var encodedData = base64url(stringifiedData);",
							"",
							"// build token",
							"var token = encodedHeader + \".\" + encodedData;",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, secret);",
							"signature = base64url(signature);",
							"var signedToken = token + \".\" + signature;",
							"console.log(signedToken);",
							"postman.setEnvironmentVariable(\"BearerToken\", signedToken);",
							"",
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"      sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function(h){",
							"    if (signingBase !== '') { signingBase += '\\n'; }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"  var hashf = (function() {",
							"      switch (config.algorithm) {",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"        default : return null;",
							"      }",
							"    }());",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var x = encodeURI(hash.toString(CryptoJS.enc.Base64));",
							"  var y = CryptoJS.enc.Base64.stringify(hash);",
							"  ",
							"  var signatureOptions = {",
							"        keyId : config.keyId,",
							"        algorithm: config.algorithm,",
							"        headers: config.headers,",
							"        signature : y",
							"      };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function(key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"  console.log(JSON.stringify(sig))",
							"  return sig;",
							"}",
							"",
							"",
							"var curDate = new Date().toGMTString();",
							"var targetUrl = request.url.trim(); // there may be surrounding ws",
							"targetUrl = targetUrl.replace(new RegExp('^https?://[^/]+/'),'/'); // strip hostname",
							"var method = request.method.toLowerCase();",
							"var request_data =  request.body;",
							"console.log(\"Request boduy is \", request.body);",
							"console.log(request_data);",
							"var sha256digest = CryptoJS.SHA256(request_data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'SHA-256=' + base64sha256;",
							"",
							"var headerHash = {",
							"      date : curDate,",
							"      digest : computedDigest",
							"    };",
							"",
							"var config = {",
							"      algorithm : 'hmac-sha256',",
							"      keyId : signatureKeyId,",
							"      secretkey : singatureSecret,",
							"      headers : ['digest' ]",
							"};",
							"",
							"var sig = computeHttpSignature(config, headerHash);",
							"",
							"postman.setEnvironmentVariable('httpsig', sig);",
							"postman.setEnvironmentVariable('computed-digest', computedDigest);",
							"postman.setEnvironmentVariable(\"current-date\", curDate);",
							"postman.setEnvironmentVariable(\"target-url\", targetUrl);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{BearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "X-Setu-Product-Instance-ID",
						"type": "text",
						"value": "{{productInstanceID}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					},
					{
						"key": "Digest",
						"type": "text",
						"value": "{{computed-digest}}"
					},
					{
						"key": "Signature",
						"type": "text",
						"value": "{{httpsig}}"
					},
					{
						"key": "Date",
						"type": "text",
						"value": "{{current-date}}"
					},
					{
						"key": "Authorization",
						"type": "text",
						"value": "",
						"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
						"disabled": true
					}
				],
				"url": {
					"raw": "https://sandbox.setu.co/api/utilities/bills/227667534118127446",
					"protocol": "https",
					"host": [
						"sandbox",
						"setu",
						"co"
					],
					"path": [
						"api",
						"utilities",
						"bills",
						"227667534118127446"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payer - Fetch Bill",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1d598b18-fb19-4071-b647-23ff099ed685",
						"exec": [
							"",
							"pm.globals.set(\"apiHost\", \"https://sandbox.setu.co\");",
							"",
							"postman.setEnvironmentVariable(\"productInstanceID\", \"3194075996277700810\")",
							"var schemeId = \"79648a41-4d8d-40b1-8b90-33bafd3abfc2\";",
							"var secret = 'fbbd0cbb-631e-4c6d-9dd0-458a4b53b704';",
							"var signatureKeyId = 'somekeyid111';",
							"var singatureSecret = 'somesecre111';",
							"",
							"var jti = Math.floor(Math.random()*1e15) + '';",
							"",
							"function base64url(source) {",
							"\t// Encode in classical base64",
							"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
							"",
							"\t// Remove padding equal characters",
							"\tencodedSource = encodedSource.replace(/=+$/, '');",
							"",
							"\t// Replace characters according to base64url specifications",
							"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
							"\tencodedSource = encodedSource.replace(/\\//g, '_');",
							"",
							"\treturn encodedSource;",
							"}",
							"",
							"function addIAT(request) {",
							"\tvar iat = Math.floor(Date.now() / 1000);",
							"\tdata.iat = iat;",
							"\treturn data;",
							"}",
							"",
							"",
							"var header = {",
							"\t\"typ\": \"JWT\",",
							"\t\"alg\": \"HS256\"",
							"};",
							"",
							"var data = {",
							"\t\"aud\": schemeId,",
							"\t\"jti\": jti",
							"};",
							"",
							"data = addIAT(data);",
							"",
							"",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
							"var encodedHeader = base64url(stringifiedHeader);",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
							"console.log(data)",
							"var encodedData = base64url(stringifiedData);",
							"",
							"// build token",
							"var token = encodedHeader + \".\" + encodedData;",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, secret);",
							"signature = base64url(signature);",
							"var signedToken = token + \".\" + signature;",
							"console.log(signedToken);",
							"postman.setEnvironmentVariable(\"BearerToken\", signedToken);",
							"",
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"      sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function(h){",
							"    if (signingBase !== '') { signingBase += '\\n'; }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"  var hashf = (function() {",
							"      switch (config.algorithm) {",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"        default : return null;",
							"      }",
							"    }());",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var x = encodeURI(hash.toString(CryptoJS.enc.Base64));",
							"  var y = CryptoJS.enc.Base64.stringify(hash);",
							"  ",
							"  var signatureOptions = {",
							"        keyId : config.keyId,",
							"        algorithm: config.algorithm,",
							"        headers: config.headers,",
							"        signature : y",
							"      };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function(key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"  console.log(JSON.stringify(sig))",
							"  return sig;",
							"}",
							"",
							"",
							"var curDate = new Date().toGMTString();",
							"var targetUrl = request.url.trim(); // there may be surrounding ws",
							"targetUrl = targetUrl.replace(new RegExp('^https?://[^/]+/'),'/'); // strip hostname",
							"var method = request.method.toLowerCase();",
							"var request_data =  request.body;",
							"console.log(\"Request boduy is \", request.body);",
							"console.log(request_data);",
							"var sha256digest = CryptoJS.SHA256(request_data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'SHA-256=' + base64sha256;",
							"",
							"var headerHash = {",
							"      date : curDate,",
							"      digest : computedDigest",
							"    };",
							"",
							"var config = {",
							"      algorithm : 'hmac-sha256',",
							"      keyId : signatureKeyId,",
							"      secretkey : singatureSecret,",
							"      headers : ['digest' ]",
							"};",
							"",
							"var sig = computeHttpSignature(config, headerHash);",
							"",
							"postman.setEnvironmentVariable('httpsig', sig);",
							"postman.setEnvironmentVariable('computed-digest', computedDigest);",
							"postman.setEnvironmentVariable(\"current-date\", curDate);",
							"postman.setEnvironmentVariable(\"target-url\", targetUrl);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{BearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Setu-Product-Instance-ID",
						"value": "{{productInstanceID}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"billerProductInstanceID\": \"2524348153236365155\",\n\t\"customerIdentifiers\": [\n\t\t{\n\t\t\t\"attributeName\": \"first_name\",\n\t\t\t\"attributeValue\": \"wassup\"\n\t\t},\n\t\t{\n\t\t\t\"attributeName\": \"panNumber\",\n\t\t\t\"attributeValue\": \"lalallahjk\"\n\t\t}\n\t]\n}"
				},
				"url": {
					"raw": "https://sandbox.setu.co/api/utilities/bills/fetch",
					"protocol": "https",
					"host": [
						"sandbox",
						"setu",
						"co"
					],
					"path": [
						"api",
						"utilities",
						"bills",
						"fetch"
					]
				}
			},
			"response": []
		},
		{
			"name": "Payer - Callback",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "1d598b18-fb19-4071-b647-23ff099ed685",
						"exec": [
							"",
							"pm.globals.set(\"apiHost\", \"https://sandbox.setu.co\");",
							"",
							"postman.setEnvironmentVariable(\"productInstanceID\", \"3194075996277700810\")",
							"var schemeId = \"79648a41-4d8d-40b1-8b90-33bafd3abfc2\";",
							"var secret = 'fbbd0cbb-631e-4c6d-9dd0-458a4b53b704';",
							"var signatureKeyId = 'somekeyid111';",
							"var singatureSecret = 'somesecre111';",
							"",
							"var jti = Math.floor(Math.random()*1e15) + '';",
							"",
							"function base64url(source) {",
							"\t// Encode in classical base64",
							"\tencodedSource = CryptoJS.enc.Base64.stringify(source);",
							"",
							"\t// Remove padding equal characters",
							"\tencodedSource = encodedSource.replace(/=+$/, '');",
							"",
							"\t// Replace characters according to base64url specifications",
							"\tencodedSource = encodedSource.replace(/\\+/g, '-');",
							"\tencodedSource = encodedSource.replace(/\\//g, '_');",
							"",
							"\treturn encodedSource;",
							"}",
							"",
							"function addIAT(request) {",
							"\tvar iat = Math.floor(Date.now() / 1000);",
							"\tdata.iat = iat;",
							"\treturn data;",
							"}",
							"",
							"",
							"var header = {",
							"\t\"typ\": \"JWT\",",
							"\t\"alg\": \"HS256\"",
							"};",
							"",
							"var data = {",
							"\t\"aud\": schemeId,",
							"\t\"jti\": jti",
							"};",
							"",
							"data = addIAT(data);",
							"",
							"",
							"",
							"// encode header",
							"var stringifiedHeader = CryptoJS.enc.Utf8.parse(JSON.stringify(header));",
							"var encodedHeader = base64url(stringifiedHeader);",
							"",
							"// encode data",
							"var stringifiedData = CryptoJS.enc.Utf8.parse(JSON.stringify(data));",
							"console.log(data)",
							"var encodedData = base64url(stringifiedData);",
							"",
							"// build token",
							"var token = encodedHeader + \".\" + encodedData;",
							"",
							"// sign token",
							"var signature = CryptoJS.HmacSHA256(token, secret);",
							"signature = base64url(signature);",
							"var signedToken = token + \".\" + signature;",
							"console.log(signedToken);",
							"postman.setEnvironmentVariable(\"BearerToken\", signedToken);",
							"",
							"function computeHttpSignature(config, headerHash) {",
							"  var template = 'keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"',",
							"      sig = template;",
							"",
							"  // compute sig here",
							"  var signingBase = '';",
							"  config.headers.forEach(function(h){",
							"    if (signingBase !== '') { signingBase += '\\n'; }",
							"    signingBase += h.toLowerCase() + \": \" + headerHash[h];",
							"  });",
							"  var hashf = (function() {",
							"      switch (config.algorithm) {",
							"        case 'hmac-sha1': return CryptoJS.HmacSHA1;",
							"        case 'hmac-sha256': return CryptoJS.HmacSHA256;",
							"        case 'hmac-sha512': return CryptoJS.HmacSHA512;",
							"        default : return null;",
							"      }",
							"    }());",
							"  var hash = hashf(signingBase, config.secretkey);",
							"  var x = encodeURI(hash.toString(CryptoJS.enc.Base64));",
							"  var y = CryptoJS.enc.Base64.stringify(hash);",
							"  ",
							"  var signatureOptions = {",
							"        keyId : config.keyId,",
							"        algorithm: config.algorithm,",
							"        headers: config.headers,",
							"        signature : y",
							"      };",
							"",
							"  // build sig string here",
							"  Object.keys(signatureOptions).forEach(function(key) {",
							"    var pattern = \"${\" + key + \"}\",",
							"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key];",
							"    sig = sig.replace(pattern, value);",
							"  });",
							"  console.log(JSON.stringify(sig))",
							"  return sig;",
							"}",
							"",
							"",
							"var curDate = new Date().toGMTString();",
							"var targetUrl = request.url.trim(); // there may be surrounding ws",
							"targetUrl = targetUrl.replace(new RegExp('^https?://[^/]+/'),'/'); // strip hostname",
							"var method = request.method.toLowerCase();",
							"var request_data =  request.body;",
							"console.log(\"Request boduy is \", request.body);",
							"console.log(request_data);",
							"var sha256digest = CryptoJS.SHA256(request_data);",
							"var base64sha256 = CryptoJS.enc.Base64.stringify(sha256digest);",
							"var computedDigest = 'SHA-256=' + base64sha256;",
							"",
							"var headerHash = {",
							"      date : curDate,",
							"      digest : computedDigest",
							"    };",
							"",
							"var config = {",
							"      algorithm : 'hmac-sha256',",
							"      keyId : signatureKeyId,",
							"      secretkey : singatureSecret,",
							"      headers : ['digest' ]",
							"};",
							"",
							"var sig = computeHttpSignature(config, headerHash);",
							"",
							"postman.setEnvironmentVariable('httpsig', sig);",
							"postman.setEnvironmentVariable('computed-digest', computedDigest);",
							"postman.setEnvironmentVariable(\"current-date\", curDate);",
							"postman.setEnvironmentVariable(\"target-url\", targetUrl);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{BearerToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "X-Setu-Product-Instance-ID",
						"type": "text",
						"value": "{{productInstanceID}}"
					},
					{
						"key": "Content-Type",
						"type": "text",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"eventUID\": \"12345679090\",\n  \"eventType\": \"SETU_PAYMENT_FULFILMENT\",\n  \"eventTimeStamp\": 2134567890,\n  \"eventData\": {\n    \"timeStamp\": \"yyyy-MM-ddTHH:mm:ssZ\",\n    \"transactionID\": \"12345679090\",\n    \"orderID\": \"Order ID as passed during transaction\",\n    \"platformBillID\": \"Setu unique bill Id for the transaction\",\n    \"payment\": {\n      \"amount\": {\n        \"currencyCode\": \"INR\",\n        \"value\": 100000\n      },\n      \"instrument\": {\n        \"type\": \"UPI\",\n        \"subtype\": \"UPI\"\n      },\n      \"channel\": \"PhonePe\",\n      \"referenceNumber\": \"<Bank-UTR>\"\n    }\n  }\n}"
				},
				"url": {
					"raw": "https://sandbox.setu.co/api/callbacks",
					"protocol": "https",
					"host": [
						"sandbox",
						"setu",
						"co"
					],
					"path": [
						"api",
						"callbacks"
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiI4OTFiYjcwYy1iNWMyLTQzZjEtYTUxMC03ZWQ5YWE5NDVmMjQiLCJuYW1lIjoiSm9obiBEb2UiLCJpYXQiOjE1MTYyMzkwMjJ9.fCnC0LmiWGFptEeCbyObp4mvYlvYaPScseckJ7qs0to",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "77f05e34-a79e-4544-99d7-be5cb1c67874",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "d929efc9-d086-4956-b202-94e3e24eadc2",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "6d71a099-e8b9-4e6f-9c59-2d6a3303c391",
			"key": "payerinstid",
			"value": "",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}